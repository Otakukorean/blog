// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole     @default(USER)
  accounts      Account[]
  Post          Post[]
  SavedPosts    SavedPosts[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id         String       @id @default(uuid())
  title      String
  image      String
  Content    String       @db.Text
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  userId     String
  User       User         @relation(fields: [userId], references: [id])
  PostTags   PostTags[]
  SavedPosts SavedPosts[]
}

model Tags {
  id        String     @id @default(uuid())
  name      String     @unique
  PostTags  PostTags[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model PostTags {
  id        String   @id @default(uuid())
  tag       Tags     @relation(fields: [tagId], references: [id])
  tagId     String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedPosts {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  userId String
  User   User   @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}
